<!--
<?xml version="1.0" encoding="UTF-8"?>
&lt;!&ndash;日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL &ndash;&gt;
&lt;!&ndash;Configuration后面的status,这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,你会看到log4j2内部各种详细输出 &ndash;&gt;
&lt;!&ndash;monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身,设置间隔秒数 &ndash;&gt;
<configuration status="WARN" monitorInterval="1800">

	<Properties>
		&lt;!&ndash; ==============================================公共配置============================================== &ndash;&gt;
		&lt;!&ndash; 设置日志文件的目录名称 &ndash;&gt;
		<property name="logFileName">FileService</property>

		&lt;!&ndash; 日志默认存放的位置,可以设置为项目根路径下,也可指定绝对路径 &ndash;&gt;
		&lt;!&ndash; 存放路径一:通用路径,window平台 &ndash;&gt;
		&lt;!&ndash; <property name="basePath">d:/logs/${logFileName}</property> &ndash;&gt;
		&lt;!&ndash; 存放路径二:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在web项目的根目录下 &ndash;&gt;
		&lt;!&ndash; <property name="basePath">${web:rootDir}/${logFileName}</property> &ndash;&gt;
		&lt;!&ndash; 存放路径三:web工程专用,java项目没有这个变量,需要删掉,否则会报异常,这里把日志放在tocmat的logs目录下 &ndash;&gt;
		<property name="basePath">/data/log/${logFileName}</property>

		&lt;!&ndash; 控制台默认输出格式,"%-5level":日志级别,"%l":输出完整的错误位置,是小写的L,因为有行号显示,所以影响日志输出的性能 &ndash;&gt;
		<property name="console_log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %l -
			%m%n</property>
		&lt;!&ndash; 日志文件默认输出格式,不带行号输出(行号显示会影响日志输出性能);%C:大写,类名;%M:方法名;%m:错误信息;%n:换行 &ndash;&gt;
		&lt;!&ndash; <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level]
			%C.%M - %m%n</property> &ndash;&gt;
		&lt;!&ndash; 日志文件默认输出格式,另类带行号输出(对日志输出性能未知);%C:大写,类名;%M:方法名;%L:行号;%m:错误信息;%n:换行 &ndash;&gt;
		<property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level]
			%C.%M[%L line] - %m%n</property>

		&lt;!&ndash; 日志默认切割的最小单位 &ndash;&gt;
		<property name="every_file_size">20MB</property>
		&lt;!&ndash; 日志默认输出级别 &ndash;&gt;
		<property name="output_log_level">DEBUG</property>

		&lt;!&ndash; ===========================================所有级别日志配置=========================================== &ndash;&gt;
		&lt;!&ndash; 日志默认存放路径(所有级别日志) &ndash;&gt;
		<property name="rolling_fileName">${basePath}/all.log</property>
		&lt;!&ndash; 日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 &ndash;&gt;
		<property name="rolling_filePattern">${basePath}/%d{yyyy-MM}/all-%d{yyyy-MM-dd-HH}-%i.log.gz</property>
		&lt;!&ndash; 日志默认同类型日志,同一文件夹下可以存放的数量,不设置此属性则默认为7个,filePattern最后要带%i才会生效 &ndash;&gt;
		<property name="rolling_max">500</property>
		&lt;!&ndash; 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用; 如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
			如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 &ndash;&gt;
		<property name="rolling_timeInterval">12</property>
		&lt;!&ndash; 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整, 如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am &ndash;&gt;
		<property name="rolling_timeModulate">true</property>

		&lt;!&ndash; ============================================Info级别日志============================================ &ndash;&gt;
		&lt;!&ndash; Info日志默认存放路径(Info级别日志) &ndash;&gt;
		<property name="info_fileName">${basePath}/info.log</property>
		&lt;!&ndash; Info日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 &ndash;&gt;
		<property name="info_filePattern">${basePath}/%d{yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log.gz</property>
		&lt;!&ndash; Info日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 &ndash;&gt;
		<property name="info_max">100</property>
		&lt;!&ndash; 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用; 如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
			如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 &ndash;&gt;
		<property name="info_timeInterval">1</property>
		&lt;!&ndash; 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整, 如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am &ndash;&gt;
		<property name="info_timeModulate">true</property>

		&lt;!&ndash; ============================================Warn级别日志============================================ &ndash;&gt;
		&lt;!&ndash; Warn日志默认存放路径(Warn级别日志) &ndash;&gt;
		<property name="warn_fileName">${basePath}/warn.log</property>
		&lt;!&ndash; Warn日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 &ndash;&gt;
		<property name="warn_filePattern">${basePath}/%d{yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log.gz</property>
		&lt;!&ndash; Warn日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 &ndash;&gt;
		<property name="warn_max">100</property>
		&lt;!&ndash; 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用; 如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
			如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 &ndash;&gt;
		<property name="warn_timeInterval">1</property>
		&lt;!&ndash; 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整, 如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am &ndash;&gt;
		<property name="warn_timeModulate">true</property>

		&lt;!&ndash; ============================================Error级别日志============================================ &ndash;&gt;
		&lt;!&ndash; Error日志默认存放路径(Error级别日志) &ndash;&gt;
		<property name="error_fileName">${basePath}/error.log</property>
		&lt;!&ndash; Error日志默认压缩路径,将超过指定文件大小的日志,自动存入按"年月"建立的文件夹下面并进行压缩,作为存档 &ndash;&gt;
		<property name="error_filePattern">${basePath}/%d{yyyy-MM}/error-%d{yyyy-MM-dd}-%i.log.gz</property>
		&lt;!&ndash; Error日志默认同一文件夹下可以存放的数量,不设置此属性则默认为7个 &ndash;&gt;
		<property name="error_max">100</property>
		&lt;!&ndash; 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用; 如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
			如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 &ndash;&gt;
		<property name="error_timeInterval">1</property>
		&lt;!&ndash; 日志默认同类型日志,是否对封存时间进行调制,若为true,则封存时间将以0点为边界进行调整, 如:现在是早上3am,interval是4,那么第一次滚动是在4am,接着是8am,12am...而不是7am &ndash;&gt;
		<property name="error_timeModulate">true</property>

		&lt;!&ndash; ============================================控制台显示控制============================================ &ndash;&gt;
		&lt;!&ndash; 控制台显示的日志最低级别 &ndash;&gt;
		<property name="console_print_level">DEBUG</property>

	</Properties>

	&lt;!&ndash;定义appender &ndash;&gt;
	<appenders>
		&lt;!&ndash; =======================================用来定义输出到控制台的配置======================================= &ndash;&gt;
		<Console name="Console" target="SYSTEM_OUT">
			&lt;!&ndash; 设置控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) &ndash;&gt;
			<ThresholdFilter level="${console_print_level}"
				onMatch="ACCEPT" onMismatch="DENY" />
			&lt;!&ndash; 设置输出格式,不设置默认为:%m%n &ndash;&gt;
			<PatternLayout pattern="${console_log_pattern}" />
		</Console>

		&lt;!&ndash; ================================打印root中指定的level级别以上的日志到文件================================ &ndash;&gt;
		<RollingFile name="RollingFile"
			fileName="${rolling_fileName}" filePattern="${rolling_filePattern}">
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy
					interval="${rolling_timeInterval}" modulate="${warn_timeModulate}" />
				<SizeBasedTriggeringPolicy
					size="${every_file_size}" />
			</Policies>
			&lt;!&ndash; 设置同类型日志,同一文件夹下可以存放的数量,如果不设置此属性则默认存放7个文件 &ndash;&gt;
			<DefaultRolloverStrategy max="${rolling_max}" />
		</RollingFile>

		&lt;!&ndash; =======================================打印INFO级别的日志到文件======================================= &ndash;&gt;
		<RollingFile name="InfoFile" fileName="${info_fileName}"
			filePattern="${info_filePattern}">
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy
					interval="${info_timeInterval}" modulate="${info_timeModulate}" />
				<SizeBasedTriggeringPolicy
					size="${every_file_size}" />
			</Policies>
			<DefaultRolloverStrategy max="${info_max}" />
			<Filters>
				<ThresholdFilter level="WARN" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="INFO" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</RollingFile>

		&lt;!&ndash; =======================================打印WARN级别的日志到文件======================================= &ndash;&gt;
		<RollingFile name="WarnFile" fileName="${warn_fileName}"
			filePattern="${warn_filePattern}">
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy
					interval="${warn_timeInterval}" modulate="${warn_timeModulate}" />
				<SizeBasedTriggeringPolicy
					size="${every_file_size}" />
			</Policies>
			<DefaultRolloverStrategy max="${warn_max}" />
			<Filters>
				<ThresholdFilter level="ERROR" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="WARN" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</RollingFile>

		&lt;!&ndash; =======================================打印ERROR级别的日志到文件======================================= &ndash;&gt;
		<RollingFile name="ErrorFile" fileName="${error_fileName}"
			filePattern="${error_filePattern}">
			<PatternLayout pattern="${log_pattern}" />
			<Policies>
				<TimeBasedTriggeringPolicy
					interval="${error_timeInterval}" modulate="${error_timeModulate}" />
				<SizeBasedTriggeringPolicy
					size="${every_file_size}" />
			</Policies>
			<DefaultRolloverStrategy max="${error_max}" />
			<Filters>
				<ThresholdFilter level="FATAL" onMatch="DENY"
					onMismatch="NEUTRAL" />
				<ThresholdFilter level="ERROR" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</RollingFile>
	</appenders>

	&lt;!&ndash;定义logger,只有定义了logger并引入的appender,appender才会生效 &ndash;&gt;
	<loggers>
		&lt;!&ndash; 设置打印sql语句配置开始,以下两者配合使用,可以优化日志的输出信息,减少一些不必要信息的输出 &ndash;&gt;
		&lt;!&ndash; 设置java.sql包下的日志只打印DEBUG及以上级别的日志,此设置可以支持sql语句的日志打印 &ndash;&gt;
		<logger name="java.sql" level="DEBUG" additivity="false">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile" />
		</logger>
		&lt;!&ndash; 设置org.mybatis.spring包下的日志只打印WARN及以上级别的日志 &ndash;&gt;
		<logger name="org.mybatis.spring" level="WARN"
			additivity="false">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile" />
		</logger>
		&lt;!&ndash; 设置org.mybatis.spring包下的日志只打印WARN及以上级别的日志 &ndash;&gt;
		<logger name="org.springframework" level="WARN"
			additivity="false">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile" />
		</logger>
		&lt;!&ndash; 设置org.mybatis.spring包下的日志只打印WARN及以上级别的日志 &ndash;&gt;
		<logger name="com.qfx.workflow.service" level="WARN"
			additivity="false">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFile" />
		</logger>
		&lt;!&ndash; 设置打印sql语句配置结束 &ndash;&gt;

		&lt;!&ndash;建立一个默认的root的logger &ndash;&gt;
		<root level="${output_log_level}">
			<appender-ref ref="RollingFile" />
			<appender-ref ref="Console" />
			&lt;!&ndash; <appender-ref ref="InfoFile"/> <appender-ref ref="WarnFile"/> <appender-ref
				ref="ErrorFile"/> &ndash;&gt;
		</root>
	</loggers>

</configuration>-->
